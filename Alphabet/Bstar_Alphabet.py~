# TEST AREA
import os
import sys
import math
from array import array
import optparse
import ROOT
from ROOT import *
import scipy
from optparse import OptionParser

# Our Bstar.Fit.fittions:
import Alphabet_Header
from Alphabet_Header import *
import Plotting_Header
from Plotting_Header import *
import Converters
from Converters import *
import Distribution_Header
from Distribution_Header import *
import Alphabet
from Alphabet import *
sys.path.append("..")
import Bstar_Functions
from Bstar_Functions import *

parser = OptionParser()

parser.add_option('-s', '--set', metavar='F', type='string', action='store',
				default       =       'data',
				dest          =       'set',
				help          =       'data or QCD')

(options, args) = parser.parse_args()


print "Options summary"
print "=================="
for  opt,value in options.__dict__.items():
		#print str(option)+ ": " + str(options[option]) 
		print str(opt) +': '+ str(value)
print "=================="
print ""

Cons = LoadConstants()
lumi = Cons['lumi']

### DEFINE THE DISTRIBUTIONS YOU WANT TO USE:

# DISTRIBUTIONS YOU WANT TO ESTIMATE:

# FORMAT IS:
# dist = ("name", "location of file", "name of tree", "weight (can be more complicated than just a number, see MC example below)")
if options.set == "data":
	Data = DIST("Data", "TWtreefile_data.root", "Tree", "(1.)")
elif options.set == "QCD":
	Data = DIST("QCD", "TWtreefile_QCD.root", "Tree", "(1.)")
# DISTRIBUTIONS YOU NEED TO SUBTRACT (KNOWN MC CONTRIBUTIONS):
ttbar = DIST("ttbar", "TWtreefile_ttbarweighted.root", "Tree", "(1.)")
singletop = DIST("st", "TWtreefile_singletop.root", "Tree", "(1.)")

print Data.File

# Now we arrange them correctly:

DistsWeWantToEstiamte = [Data]
DistsWeWantToIgnore = [ttbar, singletop]

Bstar = Alphabetizer("Bstar", DistsWeWantToEstiamte, DistsWeWantToIgnore)

# apply a preselection to the trees:
presel = "(dy<1.8)"


# pick the two variables to do the estiamte it (in this case, Soft Drop Mass (from 70 to 350 in 48 bins) and tau32 (from 0 to 1))
var_array = ["wmass", "tau32", 60,30,330, 20, 0, 1] #Assuming that wmass will stop below 330 -LC
Bstar.SetRegions(var_array, presel) # make the 2D plot
C1 = TCanvas("C1", "", 800, 600)
C1.cd()
Bstar.TwoDPlot.Draw() # Show that plot:

# NOW DO THE ACTUAL ALPHABETIZATION: (Creating the regions)
# The command is: .GetRates(cut, bins, truthbins, center, fit)
cut = [0.4, ">"]
# so we need to give it bins:
bins = [[30,75],[75,100],[130,150],[150,200][200,330]]
# truth bins (we don't want any because we are looking at real data::)
if options.set == "QCD":
	#Assuming here that the truth bins need to be around the region where we are looking for the tagrate -LC
	truthbins = [[65,95]]

# a central value for the fit (could be 0 if you wanted to stay in the mass variable, we are looking at tops, so we'll give it 170 GeV)
center = 80.
# and finally, a fit, taken from the file "Converters.py". We are using the linear fit, so:

#Assuming the first array is okay, the second value should be min of wmass range, and third should be max -LC
#Last two strings are just name and opt
F = QuadraticFit([0.1,0.1,0.1], 0, 330, "quadfit", "EMRFNEX0")
#F = LinearFit([0.2,-0.2], -75, 75, "linFit1", "EMRNS")

# All the error stuff is handled by the LinearFit class. We shouldn't have to do anything else!

# So we just run:
Bstar.GetRates(cut, bins, truthbins, center, F)

## Let's plot the results:
C2 = TCanvas("C2", "", 800, 600)
C2.cd()
Bstar.G.Draw("AP")
Bstar.G.GetXaxis().SetTitle("M_{W} (GeV)")
Bstar.G.GetYaxis().SetTitle("N_{passed}/N_{failed}")
Bstar.Fit.fit.Draw("same")
Bstar.Fit.ErrUp.SetLineStyle(2)
Bstar.Fit.ErrUp.Draw("same")
Bstar.Fit.ErrDn.SetLineStyle(2)
Bstar.Fit.ErrDn.Draw("same")
Bstar.truthG.Draw("opt")
leg = TLegend(0.6,0.6,0.89,0.89)
leg.SetLineColor(0)
leg.SetFillColor(0)
#leg.SetHeader("cut @ #tau_{2}/#tau_{1} < 0.5")
leg.AddEntry(Bstar.G, "events used in fit", "PL")
leg.AddEntry(Bstar.Fit.fit, "fit", "L")
leg.AddEntry(Bstar.Fit.ErrUp, "fit errors", "L")
leg.Draw()
C2.Print("fit_data_bbtag%s.pdf"%cut[0])
# Now we actually run the estiamte!

# cuts:

#Will have to change once I start doing rates for different bands  -LC
#Assumed that tag is our tagrate sideband and antitag is our selection -LC
tag 	= "((30<wmass<65&95<wmass)&tau21<0.4)"
antitag = "((65<wmass<95)&tau21<0.4)"


# var we want to look at:
var_array2 = ["tpt", 20,400,1200]

FILE = TFile("Tagrate_"+options.set+".root", "RECREATE")
FILE.cd()

Bstar.MakeEst(var_array2, antitag, tag)


# now we can plot (maybe I should add some auto-plotting Bstar.Fit.fittions?)
hbins = [20,400,1200]
# the real value is the sum of the histograms in self.hists_MSR
V = TH1F("V", "", hbins[0],hbins[1], hbins[2])
for i in Bstar.hists_MSR:
	V.Add(i,1.)
# the estimate is the sum of the histograms in self.hists_EST and self.hist_MSR_SUB
N = TH1F("QCD", "", hbins[0], hbins[1], hbins[2])
for i in Bstar.hists_EST:
	N.Add(i,1.)
# We can do the same thing for the Up and Down shapes:
NU = TH1F("QCD_CMS_scale_13TeVUp", "", hbins[0],hbins[1], hbins[2])
for i in Bstar.hists_EST_UP:
	NU.Add(i,1.)
ND = TH1F("QCD_CMS_scale_13TeVDown", "", hbins[0],hbins[1], hbins[2])
for i in Bstar.hists_EST_DN:
	ND.Add(i,1.)

vartitle = "P_{T}_{top} (GeV)"

NU.SetLineColor(kBlack)
ND.SetLineColor(kBlack)
NU.SetLineStyle(2)
ND.SetLineStyle(2)
N.SetLineColor(kBlack)
N.SetFillColor(kPink+3)



V.SetStats(0)
V.Sumw2()
V.SetLineColor(1)
V.SetFillColor(0)
V.SetMarkerColor(1)
V.SetMarkerStyle(20)
N.GetYaxis().SetTitle("events / "+str((hbins[2]-hbins[1])/hbins[0])+" GeV")
N.GetXaxis().SetTitle(vartitle)

leg2 = TLegend(0.6,0.6,0.89,0.89)
#leg2.SetHeader("cut @ #tau_{2}/#tau_{1} < 0.5")
leg2.SetLineColor(0)
leg2.SetFillColor(0)
leg2.AddEntry(V, "Data in 1 bb-tag fail CR", "PL")
leg2.AddEntry(N, "Data prediction", "F")
leg2.AddEntry(NU, "uncertainty", "F")


FindAndSetMax([V,N, NU, ND])
C3 = TCanvas("C3", "", 800, 600)
C3.cd()
N.Draw("Hist")
V.Draw("same E0")
NU.Draw("same")
ND.Draw("same")
leg2.Draw()
FILE.Write()
FILE.Save()
C3.Print("bkg_data_bbtag%s.pdf"%cut[0])



f = open("transfer_fn.txt",'a')
f.write("{\n")
f.write("\n\tfirst = "+str(Bstar.Fit.fit.GetParameter(0))+";")
f.write("\n\tfirstErr = "+str(Bstar.Fit.fit.GetParErrors()[0])+";")
f.write("\n\tsecond = "+str(Bstar.Fit.fit.GetParameter(1))+";")
f.write("\n\tsecondErr = "+str(Bstar.Fit.fit.GetParErrors()[1])+";")
f.write("\n\tthird = "+str(Bstar.Fit.fit.GetParameter(2))+";")
f.write("\n\tthirdErr = "+str(Bstar.Fit.fit.GetParErrors()[2])+";")
f.write("\n}\n")



