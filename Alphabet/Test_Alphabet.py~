# TEST AREA
import os
# import sys
import math
from array import array
import optparse
import ROOT
from ROOT import *
import scipy
from optparse import OptionParser

# Our Bstar.Fit.fittions:
import Alphabet_Header
from Alphabet_Header import *
import Plotting_Header
from Plotting_Header import *
import Converters
from Converters import *
import Distribution_Header
from Distribution_Header import *
import Alphabet
from Alphabet import *
# sys.path.append("..")
# import Bstar_Functions
# from Bstar_Functions import *

parser = OptionParser()

parser.add_option('-s', '--set', metavar='F', type='string', action='store',
				default       =       'data',
				dest          =       'set',
				help          =       'data or QCD')

(options, args) = parser.parse_args()


print "Options summary"
print "=================="
for  opt,value in options.__dict__.items():
		#print str(option)+ ": " + str(options[option]) 
		print str(opt) +': '+ str(value)
print "=================="
print ""

# Cons = LoadConstants()
# lumi = Cons['lumi']
lumi = 36420.0

### DEFINE THE DISTRIBUTIONS YOU WANT TO USE:

# DISTRIBUTIONS YOU WANT TO ESTIMATE:

# FORMAT IS:
# dist = ("name", "location of file", "name of tree", "weight (can be more complicated than just a number, see MC example below)")
if options.set == "data":
	Data = DIST("Data", "TWtreefile_data.root", "Tree", "weight")
elif options.set == "QCD":
	Data = DIST("QCD", "TWtreefile_QCD.root", "Tree", "weight")
# DISTRIBUTIONS YOU NEED TO SUBTRACT (KNOWN MC CONTRIBUTIONS):
ttbar = DIST("ttbar", "TWtreefile_ttbarweighted.root", "Tree", "weight")
singletop = DIST("st", "TWtreefile_singletop.root", "Tree", "weight")


# Now we arrange them correctly:

DistsWeWantToEstiamte = [Data]
DistsWeWantToIgnore = [ttbar, singletop]

Bstar = Alphabetizer("Bstar", DistsWeWantToEstiamte, DistsWeWantToIgnore)

# apply a preselection to the trees:
# Marc had this as a set of cuts "(wpt>400...etc)" but since I've applied all of these in the TTree maker, we only want to pass a weight
presel = "(1.)"


# pick the two variables to do the estiamte it (in this case, Soft Drop Mass (from 70 to 350 in 48 bins) and tau32 (from 0 to 1))
var_array = ["wmass", "tau21", 74,30,400, 20, 0, 1] #Assuming that wmass will stop below 330 -LC
Bstar.SetRegions(var_array, presel) # make the 2D plot
C1 = TCanvas("C1", "", 800, 600)
C1.cd()
Bstar.TwoDPlot.Draw() # Show that plot:

# NOW DO THE ACTUAL ALPHABETIZATION: (Creating the regions)
# The command is: .GetRates(cut, bins, truthbins, center, fit)
cut = [0.4, ">"]
# so we need to give it bins:
bins = [[30,65],[95,130],[130,165],[165,200]]
# truth bins (we don't want any because we are looking at real data::)
if options.set == "QCD":
	#Assuming here that the truth bins need to be around the region where we are looking for the tagrate -LC
	truthbins = [[65,95]]
elif options.set == "data":
	truthbins = []

# a central value for the fit (could be 0 if you wanted to stay in the mass variable, we are looking at tops, so we'll give it 170 GeV)
center = 0.
# and finally, a fit, taken from the file "Converters.py". We are using the linear fit, so:

#Assuming the first array is okay, the second value should be min of wmass range, and third should be max -LC
#Last two strings are just name and opt
F = QuadraticFit([0.1,0.1,0.1], 0, 200, "quadfit", "EMRFNEX0")
#F = LinearFit([0.2,-0.2], -75, 75, "linFit1", "EMRNS")

# All the error stuff is handled by the LinearFit class. We shouldn't have to do anything else!

# So we just run:
Bstar.GetRates(cut, bins, truthbins, center, F)

## Let's plot the results:
C2 = TCanvas("C2", "", 800, 600)
C2.cd()
Bstar.G.Draw("AP")

Bstar.G.GetXaxis().SetTitle("M_{W} (GeV)")
Bstar.G.GetYaxis().SetTitle("N_{passed}/N_{failed}")
Bstar.Fit.fit.Draw("same")
Bstar.Fit.ErrUp.SetLineStyle(2)
Bstar.Fit.ErrUp.Draw("same")
Bstar.Fit.ErrDn.SetLineStyle(2)
Bstar.Fit.ErrDn.Draw("same")
if Bstar.truthG != None:
	Bstar.truthG.Draw("opt")
leg = TLegend(0.6,0.6,0.89,0.89)
leg.SetLineColor(0)
leg.SetFillColor(0)
#leg.SetHeader("cut @ #tau_{2}/#tau_{1} < 0.5")
leg.AddEntry(Bstar.G, "events used in fit", "PL")
leg.AddEntry(Bstar.Fit.fit, "fit", "L")
leg.AddEntry(Bstar.Fit.ErrUp, "fit errors", "L")
leg.Draw()
C2.Print("fit_data_bbtag%s.pdf"%cut[0])
# Now we actually run the estiamte!

# # cuts:

# #Will have to change once I start doing rates for different bands  -LC
# #Assumed that anittag is our tagrate sideband and tag is our selection -LC
# '''Testing confirms that the tag cuts work but the antitag do not (leading to empty histos)
# Even tried ((30<wmass)&(65>wmass)&(95<wmass)&(tau21<0.4)) but don't know what the issue is
# Got singletop to work in the tester script with tag cuts (though it didn't work regularly).
# Not sure about ttbar.
# -LC (3/9/17)

# Apparently can't have three wmass cuts? works for just two -LC (3/10/17)
# '''
# antitag = "(!(wmass>65&wmass<95)&tau21<0.4)"
# tag 	= "((wmass>65&wmass<95)&tau21<0.4)"


# # var we want to look at:
# var_array2 = ["tpt", 20,400,1200]

# FILE = TFile("Tagrate_"+options.set+".root", "RECREATE")
# FILE.cd()

# Bstar.Fit.MakeConvFactor("wmass",0.)
# print "("+Data.weight+"*"+Bstar.Fit.ConvFact+")"

# #####################################################################################################
# # 3/13/17 - quickplot will ONLY fill a plot the FIRST time it is called. What makes this even 		#
# # stranger is that this problem does not occur in tester.py where multiple plots can be filled and 	#
# # drawn without issue. The difference between this script and tester.py is that tester.py ONLY does #
# # the plotting at this stage. This means that something before this comment is causing a problem	#
# # with the ability to fill plots.																	#
# #####################################################################################################

# temphistN = TH1F("Hist_NOMINAL"+Bstar.name+"_"+Data.name, "", var_array2[1], var_array2[2], var_array2[3])
# quickplot(Data.File, Data.Tree, temphistN, var_array2[0], antitag, "("+Data.weight+"*"+Bstar.Fit.ConvFact+")")
# tempCanvasN = TCanvas("tempN", "", 800, 600)
# tempCanvasN.cd()
# temphistN.Draw()

# temphist = TH1F("Hist_VAL"+Bstar.name+"_"+Data.name, "", var_array2[1], var_array2[2], var_array2[3])
# quickplot(Data.File, Data.Tree, temphist, var_array2[0], tag, Data.weight)
# tempCanvas = TCanvas("temp", "", 800, 600)
# tempCanvas.cd()
# temphist.Draw()

# # temphistU = TH1F("Hist_UP"+Bstar.name+"_"+Data.name, "", var_array2[1], var_array2[2], var_array2[3])
# # quickplot(Data.File, Data.Tree, temphistU, var_array2[0], antitag, "("+Data.weight+"*"+Bstar.Fit.ConvFactUp+")")
# # tempCanvasU = TCanvas("tempU", "", 800, 600)
# # tempCanvasU.cd()
# # temphistU.Draw()

# # temphistD = TH1F("Hist_DOWN"+Bstar.name+"_"+Data.name, "", var_array2[1], var_array2[2], var_array2[3])
# # quickplot(Data.File, Data.Tree, temphistD, var_array2[0], antitag, "("+Data.weight+"*"+Bstar.Fit.ConvFactDn+")")
# # tempCanvasD = TCanvas("tempD", "", 800, 600)
# # tempCanvasD.cd()
# # temphistD.Draw()

# # temphistA = TH1F("Hist_ATAG"+Bstar.name+"_"+Data.name, "", var_array2[1], var_array2[2], var_array2[3])
# # quickplot(Data.File, Data.Tree, temphistA, var_array2[0], antitag, Data.weight)
# # tempCanvasA = TCanvas("tempA", "", 800, 600)
# # tempCanvasA.cd()
# # temphistA.Draw()



raw_input("Press key...")

